// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sequence.proto

#ifndef PROTOBUF_sequence_2eproto__INCLUDED
#define PROTOBUF_sequence_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace fullcircle {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sequence_2eproto();
void protobuf_AssignDesc_sequence_2eproto();
void protobuf_ShutdownFile_sequence_2eproto();

class BinarySequenceMetadata;
class RGB_Value;
class BinaryFrame;
class BinarySequence;
class Snip;
class Snip_PingSnip;
class Snip_PongSnip;
class Snip_ErrorSnip;

enum Snip_SnipType {
  Snip_SnipType_PING = 1,
  Snip_SnipType_PONG = 2,
  Snip_SnipType_ERROR = 3
};
bool Snip_SnipType_IsValid(int value);
const Snip_SnipType Snip_SnipType_SnipType_MIN = Snip_SnipType_PING;
const Snip_SnipType Snip_SnipType_SnipType_MAX = Snip_SnipType_ERROR;
const int Snip_SnipType_SnipType_ARRAYSIZE = Snip_SnipType_SnipType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Snip_SnipType_descriptor();
inline const ::std::string& Snip_SnipType_Name(Snip_SnipType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Snip_SnipType_descriptor(), value);
}
inline bool Snip_SnipType_Parse(
    const ::std::string& name, Snip_SnipType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Snip_SnipType>(
    Snip_SnipType_descriptor(), name, value);
}
enum Snip_ErrorCodeType {
  Snip_ErrorCodeType_OK = 1,
  Snip_ErrorCodeType_DECODING_ERROR = 2
};
bool Snip_ErrorCodeType_IsValid(int value);
const Snip_ErrorCodeType Snip_ErrorCodeType_ErrorCodeType_MIN = Snip_ErrorCodeType_OK;
const Snip_ErrorCodeType Snip_ErrorCodeType_ErrorCodeType_MAX = Snip_ErrorCodeType_DECODING_ERROR;
const int Snip_ErrorCodeType_ErrorCodeType_ARRAYSIZE = Snip_ErrorCodeType_ErrorCodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Snip_ErrorCodeType_descriptor();
inline const ::std::string& Snip_ErrorCodeType_Name(Snip_ErrorCodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Snip_ErrorCodeType_descriptor(), value);
}
inline bool Snip_ErrorCodeType_Parse(
    const ::std::string& name, Snip_ErrorCodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Snip_ErrorCodeType>(
    Snip_ErrorCodeType_descriptor(), name, value);
}
// ===================================================================

class BinarySequenceMetadata : public ::google::protobuf::Message {
 public:
  BinarySequenceMetadata();
  virtual ~BinarySequenceMetadata();
  
  BinarySequenceMetadata(const BinarySequenceMetadata& from);
  
  inline BinarySequenceMetadata& operator=(const BinarySequenceMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BinarySequenceMetadata& default_instance();
  
  void Swap(BinarySequenceMetadata* other);
  
  // implements Message ----------------------------------------------
  
  BinarySequenceMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinarySequenceMetadata& from);
  void MergeFrom(const BinarySequenceMetadata& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 frames_per_second = 1;
  inline bool has_frames_per_second() const;
  inline void clear_frames_per_second();
  static const int kFramesPerSecondFieldNumber = 1;
  inline ::google::protobuf::uint32 frames_per_second() const;
  inline void set_frames_per_second(::google::protobuf::uint32 value);
  
  // required uint32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);
  
  // required uint32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);
  
  // required string generator_name = 4;
  inline bool has_generator_name() const;
  inline void clear_generator_name();
  static const int kGeneratorNameFieldNumber = 4;
  inline const ::std::string& generator_name() const;
  inline void set_generator_name(const ::std::string& value);
  inline void set_generator_name(const char* value);
  inline void set_generator_name(const char* value, size_t size);
  inline ::std::string* mutable_generator_name();
  inline ::std::string* release_generator_name();
  
  // required string generator_version = 5;
  inline bool has_generator_version() const;
  inline void clear_generator_version();
  static const int kGeneratorVersionFieldNumber = 5;
  inline const ::std::string& generator_version() const;
  inline void set_generator_version(const ::std::string& value);
  inline void set_generator_version(const char* value);
  inline void set_generator_version(const char* value, size_t size);
  inline ::std::string* mutable_generator_version();
  inline ::std::string* release_generator_version();
  
  // @@protoc_insertion_point(class_scope:fullcircle.BinarySequenceMetadata)
 private:
  inline void set_has_frames_per_second();
  inline void clear_has_frames_per_second();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_generator_name();
  inline void clear_has_generator_name();
  inline void set_has_generator_version();
  inline void clear_has_generator_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 frames_per_second_;
  ::google::protobuf::uint32 width_;
  ::std::string* generator_name_;
  ::std::string* generator_version_;
  ::google::protobuf::uint32 height_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_sequence_2eproto();
  friend void protobuf_AssignDesc_sequence_2eproto();
  friend void protobuf_ShutdownFile_sequence_2eproto();
  
  void InitAsDefaultInstance();
  static BinarySequenceMetadata* default_instance_;
};
// -------------------------------------------------------------------

class RGB_Value : public ::google::protobuf::Message {
 public:
  RGB_Value();
  virtual ~RGB_Value();
  
  RGB_Value(const RGB_Value& from);
  
  inline RGB_Value& operator=(const RGB_Value& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RGB_Value& default_instance();
  
  void Swap(RGB_Value* other);
  
  // implements Message ----------------------------------------------
  
  RGB_Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RGB_Value& from);
  void MergeFrom(const RGB_Value& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 red = 1;
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 1;
  inline ::google::protobuf::uint32 red() const;
  inline void set_red(::google::protobuf::uint32 value);
  
  // required uint32 green = 2;
  inline bool has_green() const;
  inline void clear_green();
  static const int kGreenFieldNumber = 2;
  inline ::google::protobuf::uint32 green() const;
  inline void set_green(::google::protobuf::uint32 value);
  
  // required uint32 blue = 3;
  inline bool has_blue() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 3;
  inline ::google::protobuf::uint32 blue() const;
  inline void set_blue(::google::protobuf::uint32 value);
  
  // required uint32 x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);
  
  // required uint32 y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:fullcircle.RGB_Value)
 private:
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_green();
  inline void clear_has_green();
  inline void set_has_blue();
  inline void clear_has_blue();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 red_;
  ::google::protobuf::uint32 green_;
  ::google::protobuf::uint32 blue_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_sequence_2eproto();
  friend void protobuf_AssignDesc_sequence_2eproto();
  friend void protobuf_ShutdownFile_sequence_2eproto();
  
  void InitAsDefaultInstance();
  static RGB_Value* default_instance_;
};
// -------------------------------------------------------------------

class BinaryFrame : public ::google::protobuf::Message {
 public:
  BinaryFrame();
  virtual ~BinaryFrame();
  
  BinaryFrame(const BinaryFrame& from);
  
  inline BinaryFrame& operator=(const BinaryFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryFrame& default_instance();
  
  void Swap(BinaryFrame* other);
  
  // implements Message ----------------------------------------------
  
  BinaryFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinaryFrame& from);
  void MergeFrom(const BinaryFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .fullcircle.RGB_Value pixel = 1;
  inline int pixel_size() const;
  inline void clear_pixel();
  static const int kPixelFieldNumber = 1;
  inline const ::fullcircle::RGB_Value& pixel(int index) const;
  inline ::fullcircle::RGB_Value* mutable_pixel(int index);
  inline ::fullcircle::RGB_Value* add_pixel();
  inline const ::google::protobuf::RepeatedPtrField< ::fullcircle::RGB_Value >&
      pixel() const;
  inline ::google::protobuf::RepeatedPtrField< ::fullcircle::RGB_Value >*
      mutable_pixel();
  
  // @@protoc_insertion_point(class_scope:fullcircle.BinaryFrame)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::fullcircle::RGB_Value > pixel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_sequence_2eproto();
  friend void protobuf_AssignDesc_sequence_2eproto();
  friend void protobuf_ShutdownFile_sequence_2eproto();
  
  void InitAsDefaultInstance();
  static BinaryFrame* default_instance_;
};
// -------------------------------------------------------------------

class BinarySequence : public ::google::protobuf::Message {
 public:
  BinarySequence();
  virtual ~BinarySequence();
  
  BinarySequence(const BinarySequence& from);
  
  inline BinarySequence& operator=(const BinarySequence& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BinarySequence& default_instance();
  
  void Swap(BinarySequence* other);
  
  // implements Message ----------------------------------------------
  
  BinarySequence* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinarySequence& from);
  void MergeFrom(const BinarySequence& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .fullcircle.BinarySequenceMetadata metadata = 1;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  inline const ::fullcircle::BinarySequenceMetadata& metadata() const;
  inline ::fullcircle::BinarySequenceMetadata* mutable_metadata();
  inline ::fullcircle::BinarySequenceMetadata* release_metadata();
  
  // repeated .fullcircle.BinaryFrame frame = 2;
  inline int frame_size() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 2;
  inline const ::fullcircle::BinaryFrame& frame(int index) const;
  inline ::fullcircle::BinaryFrame* mutable_frame(int index);
  inline ::fullcircle::BinaryFrame* add_frame();
  inline const ::google::protobuf::RepeatedPtrField< ::fullcircle::BinaryFrame >&
      frame() const;
  inline ::google::protobuf::RepeatedPtrField< ::fullcircle::BinaryFrame >*
      mutable_frame();
  
  // @@protoc_insertion_point(class_scope:fullcircle.BinarySequence)
 private:
  inline void set_has_metadata();
  inline void clear_has_metadata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::fullcircle::BinarySequenceMetadata* metadata_;
  ::google::protobuf::RepeatedPtrField< ::fullcircle::BinaryFrame > frame_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_sequence_2eproto();
  friend void protobuf_AssignDesc_sequence_2eproto();
  friend void protobuf_ShutdownFile_sequence_2eproto();
  
  void InitAsDefaultInstance();
  static BinarySequence* default_instance_;
};
// -------------------------------------------------------------------

class Snip_PingSnip : public ::google::protobuf::Message {
 public:
  Snip_PingSnip();
  virtual ~Snip_PingSnip();
  
  Snip_PingSnip(const Snip_PingSnip& from);
  
  inline Snip_PingSnip& operator=(const Snip_PingSnip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Snip_PingSnip& default_instance();
  
  void Swap(Snip_PingSnip* other);
  
  // implements Message ----------------------------------------------
  
  Snip_PingSnip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Snip_PingSnip& from);
  void MergeFrom(const Snip_PingSnip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:fullcircle.Snip.PingSnip)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_sequence_2eproto();
  friend void protobuf_AssignDesc_sequence_2eproto();
  friend void protobuf_ShutdownFile_sequence_2eproto();
  
  void InitAsDefaultInstance();
  static Snip_PingSnip* default_instance_;
};
// -------------------------------------------------------------------

class Snip_PongSnip : public ::google::protobuf::Message {
 public:
  Snip_PongSnip();
  virtual ~Snip_PongSnip();
  
  Snip_PongSnip(const Snip_PongSnip& from);
  
  inline Snip_PongSnip& operator=(const Snip_PongSnip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Snip_PongSnip& default_instance();
  
  void Swap(Snip_PongSnip* other);
  
  // implements Message ----------------------------------------------
  
  Snip_PongSnip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Snip_PongSnip& from);
  void MergeFrom(const Snip_PongSnip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:fullcircle.Snip.PongSnip)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_sequence_2eproto();
  friend void protobuf_AssignDesc_sequence_2eproto();
  friend void protobuf_ShutdownFile_sequence_2eproto();
  
  void InitAsDefaultInstance();
  static Snip_PongSnip* default_instance_;
};
// -------------------------------------------------------------------

class Snip_ErrorSnip : public ::google::protobuf::Message {
 public:
  Snip_ErrorSnip();
  virtual ~Snip_ErrorSnip();
  
  Snip_ErrorSnip(const Snip_ErrorSnip& from);
  
  inline Snip_ErrorSnip& operator=(const Snip_ErrorSnip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Snip_ErrorSnip& default_instance();
  
  void Swap(Snip_ErrorSnip* other);
  
  // implements Message ----------------------------------------------
  
  Snip_ErrorSnip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Snip_ErrorSnip& from);
  void MergeFrom(const Snip_ErrorSnip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .fullcircle.Snip.ErrorCodeType errorcode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorcodeFieldNumber = 1;
  inline ::fullcircle::Snip_ErrorCodeType errorcode() const;
  inline void set_errorcode(::fullcircle::Snip_ErrorCodeType value);
  
  // required string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // @@protoc_insertion_point(class_scope:fullcircle.Snip.ErrorSnip)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_description();
  inline void clear_has_description();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* description_;
  int errorcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_sequence_2eproto();
  friend void protobuf_AssignDesc_sequence_2eproto();
  friend void protobuf_ShutdownFile_sequence_2eproto();
  
  void InitAsDefaultInstance();
  static Snip_ErrorSnip* default_instance_;
};
// -------------------------------------------------------------------

class Snip : public ::google::protobuf::Message {
 public:
  Snip();
  virtual ~Snip();
  
  Snip(const Snip& from);
  
  inline Snip& operator=(const Snip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Snip& default_instance();
  
  void Swap(Snip* other);
  
  // implements Message ----------------------------------------------
  
  Snip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Snip& from);
  void MergeFrom(const Snip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Snip_PingSnip PingSnip;
  typedef Snip_PongSnip PongSnip;
  typedef Snip_ErrorSnip ErrorSnip;
  
  typedef Snip_SnipType SnipType;
  static const SnipType PING = Snip_SnipType_PING;
  static const SnipType PONG = Snip_SnipType_PONG;
  static const SnipType ERROR = Snip_SnipType_ERROR;
  static inline bool SnipType_IsValid(int value) {
    return Snip_SnipType_IsValid(value);
  }
  static const SnipType SnipType_MIN =
    Snip_SnipType_SnipType_MIN;
  static const SnipType SnipType_MAX =
    Snip_SnipType_SnipType_MAX;
  static const int SnipType_ARRAYSIZE =
    Snip_SnipType_SnipType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SnipType_descriptor() {
    return Snip_SnipType_descriptor();
  }
  static inline const ::std::string& SnipType_Name(SnipType value) {
    return Snip_SnipType_Name(value);
  }
  static inline bool SnipType_Parse(const ::std::string& name,
      SnipType* value) {
    return Snip_SnipType_Parse(name, value);
  }
  
  typedef Snip_ErrorCodeType ErrorCodeType;
  static const ErrorCodeType OK = Snip_ErrorCodeType_OK;
  static const ErrorCodeType DECODING_ERROR = Snip_ErrorCodeType_DECODING_ERROR;
  static inline bool ErrorCodeType_IsValid(int value) {
    return Snip_ErrorCodeType_IsValid(value);
  }
  static const ErrorCodeType ErrorCodeType_MIN =
    Snip_ErrorCodeType_ErrorCodeType_MIN;
  static const ErrorCodeType ErrorCodeType_MAX =
    Snip_ErrorCodeType_ErrorCodeType_MAX;
  static const int ErrorCodeType_ARRAYSIZE =
    Snip_ErrorCodeType_ErrorCodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCodeType_descriptor() {
    return Snip_ErrorCodeType_descriptor();
  }
  static inline const ::std::string& ErrorCodeType_Name(ErrorCodeType value) {
    return Snip_ErrorCodeType_Name(value);
  }
  static inline bool ErrorCodeType_Parse(const ::std::string& name,
      ErrorCodeType* value) {
    return Snip_ErrorCodeType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .fullcircle.Snip.SnipType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fullcircle::Snip_SnipType type() const;
  inline void set_type(::fullcircle::Snip_SnipType value);
  
  // optional .fullcircle.Snip.PingSnip ping_snip = 11;
  inline bool has_ping_snip() const;
  inline void clear_ping_snip();
  static const int kPingSnipFieldNumber = 11;
  inline const ::fullcircle::Snip_PingSnip& ping_snip() const;
  inline ::fullcircle::Snip_PingSnip* mutable_ping_snip();
  inline ::fullcircle::Snip_PingSnip* release_ping_snip();
  
  // optional .fullcircle.Snip.PongSnip pong_snip = 12;
  inline bool has_pong_snip() const;
  inline void clear_pong_snip();
  static const int kPongSnipFieldNumber = 12;
  inline const ::fullcircle::Snip_PongSnip& pong_snip() const;
  inline ::fullcircle::Snip_PongSnip* mutable_pong_snip();
  inline ::fullcircle::Snip_PongSnip* release_pong_snip();
  
  // optional .fullcircle.Snip.ErrorSnip error_snip = 13;
  inline bool has_error_snip() const;
  inline void clear_error_snip();
  static const int kErrorSnipFieldNumber = 13;
  inline const ::fullcircle::Snip_ErrorSnip& error_snip() const;
  inline ::fullcircle::Snip_ErrorSnip* mutable_error_snip();
  inline ::fullcircle::Snip_ErrorSnip* release_error_snip();
  
  // @@protoc_insertion_point(class_scope:fullcircle.Snip)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ping_snip();
  inline void clear_has_ping_snip();
  inline void set_has_pong_snip();
  inline void clear_has_pong_snip();
  inline void set_has_error_snip();
  inline void clear_has_error_snip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::fullcircle::Snip_PingSnip* ping_snip_;
  ::fullcircle::Snip_PongSnip* pong_snip_;
  ::fullcircle::Snip_ErrorSnip* error_snip_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_sequence_2eproto();
  friend void protobuf_AssignDesc_sequence_2eproto();
  friend void protobuf_ShutdownFile_sequence_2eproto();
  
  void InitAsDefaultInstance();
  static Snip* default_instance_;
};
// ===================================================================


// ===================================================================

// BinarySequenceMetadata

// required uint32 frames_per_second = 1;
inline bool BinarySequenceMetadata::has_frames_per_second() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinarySequenceMetadata::set_has_frames_per_second() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BinarySequenceMetadata::clear_has_frames_per_second() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BinarySequenceMetadata::clear_frames_per_second() {
  frames_per_second_ = 0u;
  clear_has_frames_per_second();
}
inline ::google::protobuf::uint32 BinarySequenceMetadata::frames_per_second() const {
  return frames_per_second_;
}
inline void BinarySequenceMetadata::set_frames_per_second(::google::protobuf::uint32 value) {
  set_has_frames_per_second();
  frames_per_second_ = value;
}

// required uint32 width = 2;
inline bool BinarySequenceMetadata::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BinarySequenceMetadata::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BinarySequenceMetadata::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BinarySequenceMetadata::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 BinarySequenceMetadata::width() const {
  return width_;
}
inline void BinarySequenceMetadata::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// required uint32 height = 3;
inline bool BinarySequenceMetadata::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BinarySequenceMetadata::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BinarySequenceMetadata::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BinarySequenceMetadata::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 BinarySequenceMetadata::height() const {
  return height_;
}
inline void BinarySequenceMetadata::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// required string generator_name = 4;
inline bool BinarySequenceMetadata::has_generator_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BinarySequenceMetadata::set_has_generator_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BinarySequenceMetadata::clear_has_generator_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BinarySequenceMetadata::clear_generator_name() {
  if (generator_name_ != &::google::protobuf::internal::kEmptyString) {
    generator_name_->clear();
  }
  clear_has_generator_name();
}
inline const ::std::string& BinarySequenceMetadata::generator_name() const {
  return *generator_name_;
}
inline void BinarySequenceMetadata::set_generator_name(const ::std::string& value) {
  set_has_generator_name();
  if (generator_name_ == &::google::protobuf::internal::kEmptyString) {
    generator_name_ = new ::std::string;
  }
  generator_name_->assign(value);
}
inline void BinarySequenceMetadata::set_generator_name(const char* value) {
  set_has_generator_name();
  if (generator_name_ == &::google::protobuf::internal::kEmptyString) {
    generator_name_ = new ::std::string;
  }
  generator_name_->assign(value);
}
inline void BinarySequenceMetadata::set_generator_name(const char* value, size_t size) {
  set_has_generator_name();
  if (generator_name_ == &::google::protobuf::internal::kEmptyString) {
    generator_name_ = new ::std::string;
  }
  generator_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BinarySequenceMetadata::mutable_generator_name() {
  set_has_generator_name();
  if (generator_name_ == &::google::protobuf::internal::kEmptyString) {
    generator_name_ = new ::std::string;
  }
  return generator_name_;
}
inline ::std::string* BinarySequenceMetadata::release_generator_name() {
  clear_has_generator_name();
  if (generator_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = generator_name_;
    generator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string generator_version = 5;
inline bool BinarySequenceMetadata::has_generator_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BinarySequenceMetadata::set_has_generator_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BinarySequenceMetadata::clear_has_generator_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BinarySequenceMetadata::clear_generator_version() {
  if (generator_version_ != &::google::protobuf::internal::kEmptyString) {
    generator_version_->clear();
  }
  clear_has_generator_version();
}
inline const ::std::string& BinarySequenceMetadata::generator_version() const {
  return *generator_version_;
}
inline void BinarySequenceMetadata::set_generator_version(const ::std::string& value) {
  set_has_generator_version();
  if (generator_version_ == &::google::protobuf::internal::kEmptyString) {
    generator_version_ = new ::std::string;
  }
  generator_version_->assign(value);
}
inline void BinarySequenceMetadata::set_generator_version(const char* value) {
  set_has_generator_version();
  if (generator_version_ == &::google::protobuf::internal::kEmptyString) {
    generator_version_ = new ::std::string;
  }
  generator_version_->assign(value);
}
inline void BinarySequenceMetadata::set_generator_version(const char* value, size_t size) {
  set_has_generator_version();
  if (generator_version_ == &::google::protobuf::internal::kEmptyString) {
    generator_version_ = new ::std::string;
  }
  generator_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BinarySequenceMetadata::mutable_generator_version() {
  set_has_generator_version();
  if (generator_version_ == &::google::protobuf::internal::kEmptyString) {
    generator_version_ = new ::std::string;
  }
  return generator_version_;
}
inline ::std::string* BinarySequenceMetadata::release_generator_version() {
  clear_has_generator_version();
  if (generator_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = generator_version_;
    generator_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RGB_Value

// required uint32 red = 1;
inline bool RGB_Value::has_red() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RGB_Value::set_has_red() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RGB_Value::clear_has_red() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RGB_Value::clear_red() {
  red_ = 0u;
  clear_has_red();
}
inline ::google::protobuf::uint32 RGB_Value::red() const {
  return red_;
}
inline void RGB_Value::set_red(::google::protobuf::uint32 value) {
  set_has_red();
  red_ = value;
}

// required uint32 green = 2;
inline bool RGB_Value::has_green() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RGB_Value::set_has_green() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RGB_Value::clear_has_green() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RGB_Value::clear_green() {
  green_ = 0u;
  clear_has_green();
}
inline ::google::protobuf::uint32 RGB_Value::green() const {
  return green_;
}
inline void RGB_Value::set_green(::google::protobuf::uint32 value) {
  set_has_green();
  green_ = value;
}

// required uint32 blue = 3;
inline bool RGB_Value::has_blue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RGB_Value::set_has_blue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RGB_Value::clear_has_blue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RGB_Value::clear_blue() {
  blue_ = 0u;
  clear_has_blue();
}
inline ::google::protobuf::uint32 RGB_Value::blue() const {
  return blue_;
}
inline void RGB_Value::set_blue(::google::protobuf::uint32 value) {
  set_has_blue();
  blue_ = value;
}

// required uint32 x = 4;
inline bool RGB_Value::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RGB_Value::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RGB_Value::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RGB_Value::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 RGB_Value::x() const {
  return x_;
}
inline void RGB_Value::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 5;
inline bool RGB_Value::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RGB_Value::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RGB_Value::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RGB_Value::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 RGB_Value::y() const {
  return y_;
}
inline void RGB_Value::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// BinaryFrame

// repeated .fullcircle.RGB_Value pixel = 1;
inline int BinaryFrame::pixel_size() const {
  return pixel_.size();
}
inline void BinaryFrame::clear_pixel() {
  pixel_.Clear();
}
inline const ::fullcircle::RGB_Value& BinaryFrame::pixel(int index) const {
  return pixel_.Get(index);
}
inline ::fullcircle::RGB_Value* BinaryFrame::mutable_pixel(int index) {
  return pixel_.Mutable(index);
}
inline ::fullcircle::RGB_Value* BinaryFrame::add_pixel() {
  return pixel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fullcircle::RGB_Value >&
BinaryFrame::pixel() const {
  return pixel_;
}
inline ::google::protobuf::RepeatedPtrField< ::fullcircle::RGB_Value >*
BinaryFrame::mutable_pixel() {
  return &pixel_;
}

// -------------------------------------------------------------------

// BinarySequence

// required .fullcircle.BinarySequenceMetadata metadata = 1;
inline bool BinarySequence::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinarySequence::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BinarySequence::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BinarySequence::clear_metadata() {
  if (metadata_ != NULL) metadata_->::fullcircle::BinarySequenceMetadata::Clear();
  clear_has_metadata();
}
inline const ::fullcircle::BinarySequenceMetadata& BinarySequence::metadata() const {
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::fullcircle::BinarySequenceMetadata* BinarySequence::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) metadata_ = new ::fullcircle::BinarySequenceMetadata;
  return metadata_;
}
inline ::fullcircle::BinarySequenceMetadata* BinarySequence::release_metadata() {
  clear_has_metadata();
  ::fullcircle::BinarySequenceMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}

// repeated .fullcircle.BinaryFrame frame = 2;
inline int BinarySequence::frame_size() const {
  return frame_.size();
}
inline void BinarySequence::clear_frame() {
  frame_.Clear();
}
inline const ::fullcircle::BinaryFrame& BinarySequence::frame(int index) const {
  return frame_.Get(index);
}
inline ::fullcircle::BinaryFrame* BinarySequence::mutable_frame(int index) {
  return frame_.Mutable(index);
}
inline ::fullcircle::BinaryFrame* BinarySequence::add_frame() {
  return frame_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fullcircle::BinaryFrame >&
BinarySequence::frame() const {
  return frame_;
}
inline ::google::protobuf::RepeatedPtrField< ::fullcircle::BinaryFrame >*
BinarySequence::mutable_frame() {
  return &frame_;
}

// -------------------------------------------------------------------

// Snip_PingSnip

// required uint32 count = 1;
inline bool Snip_PingSnip::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Snip_PingSnip::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Snip_PingSnip::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Snip_PingSnip::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Snip_PingSnip::count() const {
  return count_;
}
inline void Snip_PingSnip::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// Snip_PongSnip

// required uint32 count = 1;
inline bool Snip_PongSnip::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Snip_PongSnip::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Snip_PongSnip::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Snip_PongSnip::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Snip_PongSnip::count() const {
  return count_;
}
inline void Snip_PongSnip::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// Snip_ErrorSnip

// required .fullcircle.Snip.ErrorCodeType errorcode = 1;
inline bool Snip_ErrorSnip::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Snip_ErrorSnip::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Snip_ErrorSnip::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Snip_ErrorSnip::clear_errorcode() {
  errorcode_ = 1;
  clear_has_errorcode();
}
inline ::fullcircle::Snip_ErrorCodeType Snip_ErrorSnip::errorcode() const {
  return static_cast< ::fullcircle::Snip_ErrorCodeType >(errorcode_);
}
inline void Snip_ErrorSnip::set_errorcode(::fullcircle::Snip_ErrorCodeType value) {
  GOOGLE_DCHECK(::fullcircle::Snip_ErrorCodeType_IsValid(value));
  set_has_errorcode();
  errorcode_ = value;
}

// required string description = 2;
inline bool Snip_ErrorSnip::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Snip_ErrorSnip::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Snip_ErrorSnip::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Snip_ErrorSnip::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Snip_ErrorSnip::description() const {
  return *description_;
}
inline void Snip_ErrorSnip::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Snip_ErrorSnip::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Snip_ErrorSnip::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Snip_ErrorSnip::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Snip_ErrorSnip::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Snip

// required .fullcircle.Snip.SnipType type = 1;
inline bool Snip::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Snip::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Snip::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Snip::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fullcircle::Snip_SnipType Snip::type() const {
  return static_cast< ::fullcircle::Snip_SnipType >(type_);
}
inline void Snip::set_type(::fullcircle::Snip_SnipType value) {
  GOOGLE_DCHECK(::fullcircle::Snip_SnipType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .fullcircle.Snip.PingSnip ping_snip = 11;
inline bool Snip::has_ping_snip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Snip::set_has_ping_snip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Snip::clear_has_ping_snip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Snip::clear_ping_snip() {
  if (ping_snip_ != NULL) ping_snip_->::fullcircle::Snip_PingSnip::Clear();
  clear_has_ping_snip();
}
inline const ::fullcircle::Snip_PingSnip& Snip::ping_snip() const {
  return ping_snip_ != NULL ? *ping_snip_ : *default_instance_->ping_snip_;
}
inline ::fullcircle::Snip_PingSnip* Snip::mutable_ping_snip() {
  set_has_ping_snip();
  if (ping_snip_ == NULL) ping_snip_ = new ::fullcircle::Snip_PingSnip;
  return ping_snip_;
}
inline ::fullcircle::Snip_PingSnip* Snip::release_ping_snip() {
  clear_has_ping_snip();
  ::fullcircle::Snip_PingSnip* temp = ping_snip_;
  ping_snip_ = NULL;
  return temp;
}

// optional .fullcircle.Snip.PongSnip pong_snip = 12;
inline bool Snip::has_pong_snip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Snip::set_has_pong_snip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Snip::clear_has_pong_snip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Snip::clear_pong_snip() {
  if (pong_snip_ != NULL) pong_snip_->::fullcircle::Snip_PongSnip::Clear();
  clear_has_pong_snip();
}
inline const ::fullcircle::Snip_PongSnip& Snip::pong_snip() const {
  return pong_snip_ != NULL ? *pong_snip_ : *default_instance_->pong_snip_;
}
inline ::fullcircle::Snip_PongSnip* Snip::mutable_pong_snip() {
  set_has_pong_snip();
  if (pong_snip_ == NULL) pong_snip_ = new ::fullcircle::Snip_PongSnip;
  return pong_snip_;
}
inline ::fullcircle::Snip_PongSnip* Snip::release_pong_snip() {
  clear_has_pong_snip();
  ::fullcircle::Snip_PongSnip* temp = pong_snip_;
  pong_snip_ = NULL;
  return temp;
}

// optional .fullcircle.Snip.ErrorSnip error_snip = 13;
inline bool Snip::has_error_snip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Snip::set_has_error_snip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Snip::clear_has_error_snip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Snip::clear_error_snip() {
  if (error_snip_ != NULL) error_snip_->::fullcircle::Snip_ErrorSnip::Clear();
  clear_has_error_snip();
}
inline const ::fullcircle::Snip_ErrorSnip& Snip::error_snip() const {
  return error_snip_ != NULL ? *error_snip_ : *default_instance_->error_snip_;
}
inline ::fullcircle::Snip_ErrorSnip* Snip::mutable_error_snip() {
  set_has_error_snip();
  if (error_snip_ == NULL) error_snip_ = new ::fullcircle::Snip_ErrorSnip;
  return error_snip_;
}
inline ::fullcircle::Snip_ErrorSnip* Snip::release_error_snip() {
  clear_has_error_snip();
  ::fullcircle::Snip_ErrorSnip* temp = error_snip_;
  error_snip_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fullcircle

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fullcircle::Snip_SnipType>() {
  return ::fullcircle::Snip_SnipType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fullcircle::Snip_ErrorCodeType>() {
  return ::fullcircle::Snip_ErrorCodeType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sequence_2eproto__INCLUDED
