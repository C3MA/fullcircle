// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sequence.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fullcircle {

namespace {

const ::google::protobuf::Descriptor* BinarySequenceMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinarySequenceMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* RGB_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RGB_Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinarySequence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinarySequence_reflection_ = NULL;
const ::google::protobuf::Descriptor* Snip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Snip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Snip_PingSnip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Snip_PingSnip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Snip_PongSnip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Snip_PongSnip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Snip_ErrorSnip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Snip_ErrorSnip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Snip_SnipType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Snip_ErrorCodeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sequence_2eproto() {
  protobuf_AddDesc_sequence_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sequence.proto");
  GOOGLE_CHECK(file != NULL);
  BinarySequenceMetadata_descriptor_ = file->message_type(0);
  static const int BinarySequenceMetadata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequenceMetadata, frames_per_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequenceMetadata, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequenceMetadata, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequenceMetadata, generator_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequenceMetadata, generator_version_),
  };
  BinarySequenceMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinarySequenceMetadata_descriptor_,
      BinarySequenceMetadata::default_instance_,
      BinarySequenceMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequenceMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequenceMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinarySequenceMetadata));
  RGB_Value_descriptor_ = file->message_type(1);
  static const int RGB_Value_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB_Value, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB_Value, green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB_Value, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB_Value, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB_Value, y_),
  };
  RGB_Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RGB_Value_descriptor_,
      RGB_Value::default_instance_,
      RGB_Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB_Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGB_Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RGB_Value));
  BinaryFrame_descriptor_ = file->message_type(2);
  static const int BinaryFrame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryFrame, pixel_),
  };
  BinaryFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryFrame_descriptor_,
      BinaryFrame::default_instance_,
      BinaryFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryFrame));
  BinarySequence_descriptor_ = file->message_type(3);
  static const int BinarySequence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequence, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequence, frame_),
  };
  BinarySequence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinarySequence_descriptor_,
      BinarySequence::default_instance_,
      BinarySequence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySequence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinarySequence));
  Snip_descriptor_ = file->message_type(4);
  static const int Snip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip, ping_snip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip, pong_snip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip, error_snip_),
  };
  Snip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Snip_descriptor_,
      Snip::default_instance_,
      Snip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Snip));
  Snip_PingSnip_descriptor_ = Snip_descriptor_->nested_type(0);
  static const int Snip_PingSnip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip_PingSnip, count_),
  };
  Snip_PingSnip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Snip_PingSnip_descriptor_,
      Snip_PingSnip::default_instance_,
      Snip_PingSnip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip_PingSnip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip_PingSnip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Snip_PingSnip));
  Snip_PongSnip_descriptor_ = Snip_descriptor_->nested_type(1);
  static const int Snip_PongSnip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip_PongSnip, count_),
  };
  Snip_PongSnip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Snip_PongSnip_descriptor_,
      Snip_PongSnip::default_instance_,
      Snip_PongSnip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip_PongSnip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip_PongSnip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Snip_PongSnip));
  Snip_ErrorSnip_descriptor_ = Snip_descriptor_->nested_type(2);
  static const int Snip_ErrorSnip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip_ErrorSnip, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip_ErrorSnip, description_),
  };
  Snip_ErrorSnip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Snip_ErrorSnip_descriptor_,
      Snip_ErrorSnip::default_instance_,
      Snip_ErrorSnip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip_ErrorSnip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snip_ErrorSnip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Snip_ErrorSnip));
  Snip_SnipType_descriptor_ = Snip_descriptor_->enum_type(0);
  Snip_ErrorCodeType_descriptor_ = Snip_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sequence_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinarySequenceMetadata_descriptor_, &BinarySequenceMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RGB_Value_descriptor_, &RGB_Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryFrame_descriptor_, &BinaryFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinarySequence_descriptor_, &BinarySequence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Snip_descriptor_, &Snip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Snip_PingSnip_descriptor_, &Snip_PingSnip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Snip_PongSnip_descriptor_, &Snip_PongSnip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Snip_ErrorSnip_descriptor_, &Snip_ErrorSnip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sequence_2eproto() {
  delete BinarySequenceMetadata::default_instance_;
  delete BinarySequenceMetadata_reflection_;
  delete RGB_Value::default_instance_;
  delete RGB_Value_reflection_;
  delete BinaryFrame::default_instance_;
  delete BinaryFrame_reflection_;
  delete BinarySequence::default_instance_;
  delete BinarySequence_reflection_;
  delete Snip::default_instance_;
  delete Snip_reflection_;
  delete Snip_PingSnip::default_instance_;
  delete Snip_PingSnip_reflection_;
  delete Snip_PongSnip::default_instance_;
  delete Snip_PongSnip_reflection_;
  delete Snip_ErrorSnip::default_instance_;
  delete Snip_ErrorSnip_reflection_;
}

void protobuf_AddDesc_sequence_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016sequence.proto\022\nfullcircle\"\205\001\n\026BinaryS"
    "equenceMetadata\022\031\n\021frames_per_second\030\001 \002"
    "(\r\022\r\n\005width\030\002 \002(\r\022\016\n\006height\030\003 \002(\r\022\026\n\016gen"
    "erator_name\030\004 \002(\t\022\031\n\021generator_version\030\005"
    " \002(\t\"K\n\tRGB_Value\022\013\n\003red\030\001 \002(\r\022\r\n\005green\030"
    "\002 \002(\r\022\014\n\004blue\030\003 \002(\r\022\t\n\001x\030\004 \002(\r\022\t\n\001y\030\005 \002("
    "\r\"3\n\013BinaryFrame\022$\n\005pixel\030\001 \003(\0132\025.fullci"
    "rcle.RGB_Value\"n\n\016BinarySequence\0224\n\010meta"
    "data\030\001 \002(\0132\".fullcircle.BinarySequenceMe"
    "tadata\022&\n\005frame\030\002 \003(\0132\027.fullcircle.Binar"
    "yFrame\"\236\003\n\004Snip\022\'\n\004type\030\001 \002(\0162\031.fullcirc"
    "le.Snip.SnipType\022,\n\tping_snip\030\013 \001(\0132\031.fu"
    "llcircle.Snip.PingSnip\022,\n\tpong_snip\030\014 \001("
    "\0132\031.fullcircle.Snip.PongSnip\022.\n\nerror_sn"
    "ip\030\r \001(\0132\032.fullcircle.Snip.ErrorSnip\032\031\n\010"
    "PingSnip\022\r\n\005count\030\001 \002(\r\032\031\n\010PongSnip\022\r\n\005c"
    "ount\030\001 \002(\r\032S\n\tErrorSnip\0221\n\terrorcode\030\001 \002"
    "(\0162\036.fullcircle.Snip.ErrorCodeType\022\023\n\013de"
    "scription\030\002 \002(\t\")\n\010SnipType\022\010\n\004PING\020\001\022\010\n"
    "\004PONG\020\002\022\t\n\005ERROR\020\003\"+\n\rErrorCodeType\022\006\n\002O"
    "K\020\001\022\022\n\016DECODING_ERROR\020\002", 823);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sequence.proto", &protobuf_RegisterTypes);
  BinarySequenceMetadata::default_instance_ = new BinarySequenceMetadata();
  RGB_Value::default_instance_ = new RGB_Value();
  BinaryFrame::default_instance_ = new BinaryFrame();
  BinarySequence::default_instance_ = new BinarySequence();
  Snip::default_instance_ = new Snip();
  Snip_PingSnip::default_instance_ = new Snip_PingSnip();
  Snip_PongSnip::default_instance_ = new Snip_PongSnip();
  Snip_ErrorSnip::default_instance_ = new Snip_ErrorSnip();
  BinarySequenceMetadata::default_instance_->InitAsDefaultInstance();
  RGB_Value::default_instance_->InitAsDefaultInstance();
  BinaryFrame::default_instance_->InitAsDefaultInstance();
  BinarySequence::default_instance_->InitAsDefaultInstance();
  Snip::default_instance_->InitAsDefaultInstance();
  Snip_PingSnip::default_instance_->InitAsDefaultInstance();
  Snip_PongSnip::default_instance_->InitAsDefaultInstance();
  Snip_ErrorSnip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sequence_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sequence_2eproto {
  StaticDescriptorInitializer_sequence_2eproto() {
    protobuf_AddDesc_sequence_2eproto();
  }
} static_descriptor_initializer_sequence_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BinarySequenceMetadata::kFramesPerSecondFieldNumber;
const int BinarySequenceMetadata::kWidthFieldNumber;
const int BinarySequenceMetadata::kHeightFieldNumber;
const int BinarySequenceMetadata::kGeneratorNameFieldNumber;
const int BinarySequenceMetadata::kGeneratorVersionFieldNumber;
#endif  // !_MSC_VER

BinarySequenceMetadata::BinarySequenceMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BinarySequenceMetadata::InitAsDefaultInstance() {
}

BinarySequenceMetadata::BinarySequenceMetadata(const BinarySequenceMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BinarySequenceMetadata::SharedCtor() {
  _cached_size_ = 0;
  frames_per_second_ = 0u;
  width_ = 0u;
  height_ = 0u;
  generator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  generator_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinarySequenceMetadata::~BinarySequenceMetadata() {
  SharedDtor();
}

void BinarySequenceMetadata::SharedDtor() {
  if (generator_name_ != &::google::protobuf::internal::kEmptyString) {
    delete generator_name_;
  }
  if (generator_version_ != &::google::protobuf::internal::kEmptyString) {
    delete generator_version_;
  }
  if (this != default_instance_) {
  }
}

void BinarySequenceMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinarySequenceMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinarySequenceMetadata_descriptor_;
}

const BinarySequenceMetadata& BinarySequenceMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_2eproto();  return *default_instance_;
}

BinarySequenceMetadata* BinarySequenceMetadata::default_instance_ = NULL;

BinarySequenceMetadata* BinarySequenceMetadata::New() const {
  return new BinarySequenceMetadata;
}

void BinarySequenceMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frames_per_second_ = 0u;
    width_ = 0u;
    height_ = 0u;
    if (has_generator_name()) {
      if (generator_name_ != &::google::protobuf::internal::kEmptyString) {
        generator_name_->clear();
      }
    }
    if (has_generator_version()) {
      if (generator_version_ != &::google::protobuf::internal::kEmptyString) {
        generator_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinarySequenceMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frames_per_second = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frames_per_second_)));
          set_has_frames_per_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // required uint32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // required uint32 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_generator_name;
        break;
      }
      
      // required string generator_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generator_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->generator_name().data(), this->generator_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_generator_version;
        break;
      }
      
      // required string generator_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generator_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->generator_version().data(), this->generator_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BinarySequenceMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 frames_per_second = 1;
  if (has_frames_per_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frames_per_second(), output);
  }
  
  // required uint32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }
  
  // required uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }
  
  // required string generator_name = 4;
  if (has_generator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generator_name().data(), this->generator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->generator_name(), output);
  }
  
  // required string generator_version = 5;
  if (has_generator_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generator_version().data(), this->generator_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->generator_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BinarySequenceMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 frames_per_second = 1;
  if (has_frames_per_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frames_per_second(), target);
  }
  
  // required uint32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }
  
  // required uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }
  
  // required string generator_name = 4;
  if (has_generator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generator_name().data(), this->generator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->generator_name(), target);
  }
  
  // required string generator_version = 5;
  if (has_generator_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generator_version().data(), this->generator_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->generator_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BinarySequenceMetadata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 frames_per_second = 1;
    if (has_frames_per_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frames_per_second());
    }
    
    // required uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }
    
    // required uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }
    
    // required string generator_name = 4;
    if (has_generator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generator_name());
    }
    
    // required string generator_version = 5;
    if (has_generator_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generator_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinarySequenceMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinarySequenceMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinarySequenceMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinarySequenceMetadata::MergeFrom(const BinarySequenceMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frames_per_second()) {
      set_frames_per_second(from.frames_per_second());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_generator_name()) {
      set_generator_name(from.generator_name());
    }
    if (from.has_generator_version()) {
      set_generator_version(from.generator_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinarySequenceMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinarySequenceMetadata::CopyFrom(const BinarySequenceMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinarySequenceMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void BinarySequenceMetadata::Swap(BinarySequenceMetadata* other) {
  if (other != this) {
    std::swap(frames_per_second_, other->frames_per_second_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(generator_name_, other->generator_name_);
    std::swap(generator_version_, other->generator_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinarySequenceMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinarySequenceMetadata_descriptor_;
  metadata.reflection = BinarySequenceMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RGB_Value::kRedFieldNumber;
const int RGB_Value::kGreenFieldNumber;
const int RGB_Value::kBlueFieldNumber;
const int RGB_Value::kXFieldNumber;
const int RGB_Value::kYFieldNumber;
#endif  // !_MSC_VER

RGB_Value::RGB_Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RGB_Value::InitAsDefaultInstance() {
}

RGB_Value::RGB_Value(const RGB_Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RGB_Value::SharedCtor() {
  _cached_size_ = 0;
  red_ = 0u;
  green_ = 0u;
  blue_ = 0u;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RGB_Value::~RGB_Value() {
  SharedDtor();
}

void RGB_Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RGB_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RGB_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RGB_Value_descriptor_;
}

const RGB_Value& RGB_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_2eproto();  return *default_instance_;
}

RGB_Value* RGB_Value::default_instance_ = NULL;

RGB_Value* RGB_Value::New() const {
  return new RGB_Value;
}

void RGB_Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    red_ = 0u;
    green_ = 0u;
    blue_ = 0u;
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RGB_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 red = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_)));
          set_has_red();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_green;
        break;
      }
      
      // required uint32 green = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &green_)));
          set_has_green();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blue;
        break;
      }
      
      // required uint32 blue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_)));
          set_has_blue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }
      
      // required uint32 x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }
      
      // required uint32 y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RGB_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 red = 1;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->red(), output);
  }
  
  // required uint32 green = 2;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->green(), output);
  }
  
  // required uint32 blue = 3;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blue(), output);
  }
  
  // required uint32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->x(), output);
  }
  
  // required uint32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RGB_Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 red = 1;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->red(), target);
  }
  
  // required uint32 green = 2;
  if (has_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->green(), target);
  }
  
  // required uint32 blue = 3;
  if (has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blue(), target);
  }
  
  // required uint32 x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->x(), target);
  }
  
  // required uint32 y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RGB_Value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 red = 1;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red());
    }
    
    // required uint32 green = 2;
    if (has_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->green());
    }
    
    // required uint32 blue = 3;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue());
    }
    
    // required uint32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // required uint32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RGB_Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RGB_Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RGB_Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RGB_Value::MergeFrom(const RGB_Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RGB_Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGB_Value::CopyFrom(const RGB_Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGB_Value::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void RGB_Value::Swap(RGB_Value* other) {
  if (other != this) {
    std::swap(red_, other->red_);
    std::swap(green_, other->green_);
    std::swap(blue_, other->blue_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RGB_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RGB_Value_descriptor_;
  metadata.reflection = RGB_Value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryFrame::kPixelFieldNumber;
#endif  // !_MSC_VER

BinaryFrame::BinaryFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BinaryFrame::InitAsDefaultInstance() {
}

BinaryFrame::BinaryFrame(const BinaryFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BinaryFrame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryFrame::~BinaryFrame() {
  SharedDtor();
}

void BinaryFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryFrame_descriptor_;
}

const BinaryFrame& BinaryFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_2eproto();  return *default_instance_;
}

BinaryFrame* BinaryFrame::default_instance_ = NULL;

BinaryFrame* BinaryFrame::New() const {
  return new BinaryFrame;
}

void BinaryFrame::Clear() {
  pixel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fullcircle.RGB_Value pixel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pixel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pixel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pixel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BinaryFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .fullcircle.RGB_Value pixel = 1;
  for (int i = 0; i < this->pixel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pixel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BinaryFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .fullcircle.RGB_Value pixel = 1;
  for (int i = 0; i < this->pixel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pixel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BinaryFrame::ByteSize() const {
  int total_size = 0;
  
  // repeated .fullcircle.RGB_Value pixel = 1;
  total_size += 1 * this->pixel_size();
  for (int i = 0; i < this->pixel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pixel(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryFrame::MergeFrom(const BinaryFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  pixel_.MergeFrom(from.pixel_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryFrame::CopyFrom(const BinaryFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryFrame::IsInitialized() const {
  
  for (int i = 0; i < pixel_size(); i++) {
    if (!this->pixel(i).IsInitialized()) return false;
  }
  return true;
}

void BinaryFrame::Swap(BinaryFrame* other) {
  if (other != this) {
    pixel_.Swap(&other->pixel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryFrame_descriptor_;
  metadata.reflection = BinaryFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinarySequence::kMetadataFieldNumber;
const int BinarySequence::kFrameFieldNumber;
#endif  // !_MSC_VER

BinarySequence::BinarySequence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BinarySequence::InitAsDefaultInstance() {
  metadata_ = const_cast< ::fullcircle::BinarySequenceMetadata*>(&::fullcircle::BinarySequenceMetadata::default_instance());
}

BinarySequence::BinarySequence(const BinarySequence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BinarySequence::SharedCtor() {
  _cached_size_ = 0;
  metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinarySequence::~BinarySequence() {
  SharedDtor();
}

void BinarySequence::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
  }
}

void BinarySequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinarySequence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinarySequence_descriptor_;
}

const BinarySequence& BinarySequence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_2eproto();  return *default_instance_;
}

BinarySequence* BinarySequence::default_instance_ = NULL;

BinarySequence* BinarySequence::New() const {
  return new BinarySequence;
}

void BinarySequence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::fullcircle::BinarySequenceMetadata::Clear();
    }
  }
  frame_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinarySequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fullcircle.BinarySequenceMetadata metadata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frame;
        break;
      }
      
      // repeated .fullcircle.BinaryFrame frame = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frame;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BinarySequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fullcircle.BinarySequenceMetadata metadata = 1;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metadata(), output);
  }
  
  // repeated .fullcircle.BinaryFrame frame = 2;
  for (int i = 0; i < this->frame_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frame(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BinarySequence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fullcircle.BinarySequenceMetadata metadata = 1;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metadata(), target);
  }
  
  // repeated .fullcircle.BinaryFrame frame = 2;
  for (int i = 0; i < this->frame_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frame(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BinarySequence::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fullcircle.BinarySequenceMetadata metadata = 1;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
  }
  // repeated .fullcircle.BinaryFrame frame = 2;
  total_size += 1 * this->frame_size();
  for (int i = 0; i < this->frame_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frame(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinarySequence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinarySequence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinarySequence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinarySequence::MergeFrom(const BinarySequence& from) {
  GOOGLE_CHECK_NE(&from, this);
  frame_.MergeFrom(from.frame_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      mutable_metadata()->::fullcircle::BinarySequenceMetadata::MergeFrom(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinarySequence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinarySequence::CopyFrom(const BinarySequence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinarySequence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  for (int i = 0; i < frame_size(); i++) {
    if (!this->frame(i).IsInitialized()) return false;
  }
  return true;
}

void BinarySequence::Swap(BinarySequence* other) {
  if (other != this) {
    std::swap(metadata_, other->metadata_);
    frame_.Swap(&other->frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinarySequence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinarySequence_descriptor_;
  metadata.reflection = BinarySequence_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Snip_SnipType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snip_SnipType_descriptor_;
}
bool Snip_SnipType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Snip_SnipType Snip::PING;
const Snip_SnipType Snip::PONG;
const Snip_SnipType Snip::ERROR;
const Snip_SnipType Snip::SnipType_MIN;
const Snip_SnipType Snip::SnipType_MAX;
const int Snip::SnipType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Snip_ErrorCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snip_ErrorCodeType_descriptor_;
}
bool Snip_ErrorCodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Snip_ErrorCodeType Snip::OK;
const Snip_ErrorCodeType Snip::DECODING_ERROR;
const Snip_ErrorCodeType Snip::ErrorCodeType_MIN;
const Snip_ErrorCodeType Snip::ErrorCodeType_MAX;
const int Snip::ErrorCodeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Snip_PingSnip::kCountFieldNumber;
#endif  // !_MSC_VER

Snip_PingSnip::Snip_PingSnip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Snip_PingSnip::InitAsDefaultInstance() {
}

Snip_PingSnip::Snip_PingSnip(const Snip_PingSnip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Snip_PingSnip::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Snip_PingSnip::~Snip_PingSnip() {
  SharedDtor();
}

void Snip_PingSnip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Snip_PingSnip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snip_PingSnip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snip_PingSnip_descriptor_;
}

const Snip_PingSnip& Snip_PingSnip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_2eproto();  return *default_instance_;
}

Snip_PingSnip* Snip_PingSnip::default_instance_ = NULL;

Snip_PingSnip* Snip_PingSnip::New() const {
  return new Snip_PingSnip;
}

void Snip_PingSnip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Snip_PingSnip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Snip_PingSnip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Snip_PingSnip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Snip_PingSnip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snip_PingSnip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Snip_PingSnip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Snip_PingSnip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Snip_PingSnip::MergeFrom(const Snip_PingSnip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Snip_PingSnip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snip_PingSnip::CopyFrom(const Snip_PingSnip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snip_PingSnip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Snip_PingSnip::Swap(Snip_PingSnip* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Snip_PingSnip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Snip_PingSnip_descriptor_;
  metadata.reflection = Snip_PingSnip_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Snip_PongSnip::kCountFieldNumber;
#endif  // !_MSC_VER

Snip_PongSnip::Snip_PongSnip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Snip_PongSnip::InitAsDefaultInstance() {
}

Snip_PongSnip::Snip_PongSnip(const Snip_PongSnip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Snip_PongSnip::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Snip_PongSnip::~Snip_PongSnip() {
  SharedDtor();
}

void Snip_PongSnip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Snip_PongSnip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snip_PongSnip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snip_PongSnip_descriptor_;
}

const Snip_PongSnip& Snip_PongSnip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_2eproto();  return *default_instance_;
}

Snip_PongSnip* Snip_PongSnip::default_instance_ = NULL;

Snip_PongSnip* Snip_PongSnip::New() const {
  return new Snip_PongSnip;
}

void Snip_PongSnip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Snip_PongSnip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Snip_PongSnip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Snip_PongSnip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Snip_PongSnip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snip_PongSnip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Snip_PongSnip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Snip_PongSnip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Snip_PongSnip::MergeFrom(const Snip_PongSnip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Snip_PongSnip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snip_PongSnip::CopyFrom(const Snip_PongSnip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snip_PongSnip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Snip_PongSnip::Swap(Snip_PongSnip* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Snip_PongSnip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Snip_PongSnip_descriptor_;
  metadata.reflection = Snip_PongSnip_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Snip_ErrorSnip::kErrorcodeFieldNumber;
const int Snip_ErrorSnip::kDescriptionFieldNumber;
#endif  // !_MSC_VER

Snip_ErrorSnip::Snip_ErrorSnip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Snip_ErrorSnip::InitAsDefaultInstance() {
}

Snip_ErrorSnip::Snip_ErrorSnip(const Snip_ErrorSnip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Snip_ErrorSnip::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Snip_ErrorSnip::~Snip_ErrorSnip() {
  SharedDtor();
}

void Snip_ErrorSnip::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Snip_ErrorSnip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snip_ErrorSnip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snip_ErrorSnip_descriptor_;
}

const Snip_ErrorSnip& Snip_ErrorSnip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_2eproto();  return *default_instance_;
}

Snip_ErrorSnip* Snip_ErrorSnip::default_instance_ = NULL;

Snip_ErrorSnip* Snip_ErrorSnip::New() const {
  return new Snip_ErrorSnip;
}

void Snip_ErrorSnip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 1;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Snip_ErrorSnip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fullcircle.Snip.ErrorCodeType errorcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fullcircle::Snip_ErrorCodeType_IsValid(value)) {
            set_errorcode(static_cast< ::fullcircle::Snip_ErrorCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }
      
      // required string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Snip_ErrorSnip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fullcircle.Snip.ErrorCodeType errorcode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorcode(), output);
  }
  
  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Snip_ErrorSnip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fullcircle.Snip.ErrorCodeType errorcode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorcode(), target);
  }
  
  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Snip_ErrorSnip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fullcircle.Snip.ErrorCodeType errorcode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }
    
    // required string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snip_ErrorSnip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Snip_ErrorSnip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Snip_ErrorSnip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Snip_ErrorSnip::MergeFrom(const Snip_ErrorSnip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Snip_ErrorSnip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snip_ErrorSnip::CopyFrom(const Snip_ErrorSnip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snip_ErrorSnip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Snip_ErrorSnip::Swap(Snip_ErrorSnip* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Snip_ErrorSnip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Snip_ErrorSnip_descriptor_;
  metadata.reflection = Snip_ErrorSnip_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Snip::kTypeFieldNumber;
const int Snip::kPingSnipFieldNumber;
const int Snip::kPongSnipFieldNumber;
const int Snip::kErrorSnipFieldNumber;
#endif  // !_MSC_VER

Snip::Snip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Snip::InitAsDefaultInstance() {
  ping_snip_ = const_cast< ::fullcircle::Snip_PingSnip*>(&::fullcircle::Snip_PingSnip::default_instance());
  pong_snip_ = const_cast< ::fullcircle::Snip_PongSnip*>(&::fullcircle::Snip_PongSnip::default_instance());
  error_snip_ = const_cast< ::fullcircle::Snip_ErrorSnip*>(&::fullcircle::Snip_ErrorSnip::default_instance());
}

Snip::Snip(const Snip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Snip::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ping_snip_ = NULL;
  pong_snip_ = NULL;
  error_snip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Snip::~Snip() {
  SharedDtor();
}

void Snip::SharedDtor() {
  if (this != default_instance_) {
    delete ping_snip_;
    delete pong_snip_;
    delete error_snip_;
  }
}

void Snip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snip_descriptor_;
}

const Snip& Snip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_2eproto();  return *default_instance_;
}

Snip* Snip::default_instance_ = NULL;

Snip* Snip::New() const {
  return new Snip;
}

void Snip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_ping_snip()) {
      if (ping_snip_ != NULL) ping_snip_->::fullcircle::Snip_PingSnip::Clear();
    }
    if (has_pong_snip()) {
      if (pong_snip_ != NULL) pong_snip_->::fullcircle::Snip_PongSnip::Clear();
    }
    if (has_error_snip()) {
      if (error_snip_ != NULL) error_snip_->::fullcircle::Snip_ErrorSnip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Snip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fullcircle.Snip.SnipType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fullcircle::Snip_SnipType_IsValid(value)) {
            set_type(static_cast< ::fullcircle::Snip_SnipType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ping_snip;
        break;
      }
      
      // optional .fullcircle.Snip.PingSnip ping_snip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping_snip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_snip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pong_snip;
        break;
      }
      
      // optional .fullcircle.Snip.PongSnip pong_snip = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pong_snip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pong_snip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_error_snip;
        break;
      }
      
      // optional .fullcircle.Snip.ErrorSnip error_snip = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_snip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error_snip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Snip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fullcircle.Snip.SnipType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .fullcircle.Snip.PingSnip ping_snip = 11;
  if (has_ping_snip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ping_snip(), output);
  }
  
  // optional .fullcircle.Snip.PongSnip pong_snip = 12;
  if (has_pong_snip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pong_snip(), output);
  }
  
  // optional .fullcircle.Snip.ErrorSnip error_snip = 13;
  if (has_error_snip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->error_snip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Snip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fullcircle.Snip.SnipType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .fullcircle.Snip.PingSnip ping_snip = 11;
  if (has_ping_snip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ping_snip(), target);
  }
  
  // optional .fullcircle.Snip.PongSnip pong_snip = 12;
  if (has_pong_snip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pong_snip(), target);
  }
  
  // optional .fullcircle.Snip.ErrorSnip error_snip = 13;
  if (has_error_snip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->error_snip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Snip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fullcircle.Snip.SnipType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .fullcircle.Snip.PingSnip ping_snip = 11;
    if (has_ping_snip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping_snip());
    }
    
    // optional .fullcircle.Snip.PongSnip pong_snip = 12;
    if (has_pong_snip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pong_snip());
    }
    
    // optional .fullcircle.Snip.ErrorSnip error_snip = 13;
    if (has_error_snip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error_snip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Snip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Snip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Snip::MergeFrom(const Snip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ping_snip()) {
      mutable_ping_snip()->::fullcircle::Snip_PingSnip::MergeFrom(from.ping_snip());
    }
    if (from.has_pong_snip()) {
      mutable_pong_snip()->::fullcircle::Snip_PongSnip::MergeFrom(from.pong_snip());
    }
    if (from.has_error_snip()) {
      mutable_error_snip()->::fullcircle::Snip_ErrorSnip::MergeFrom(from.error_snip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Snip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snip::CopyFrom(const Snip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ping_snip()) {
    if (!this->ping_snip().IsInitialized()) return false;
  }
  if (has_pong_snip()) {
    if (!this->pong_snip().IsInitialized()) return false;
  }
  if (has_error_snip()) {
    if (!this->error_snip().IsInitialized()) return false;
  }
  return true;
}

void Snip::Swap(Snip* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ping_snip_, other->ping_snip_);
    std::swap(pong_snip_, other->pong_snip_);
    std::swap(error_snip_, other->error_snip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Snip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Snip_descriptor_;
  metadata.reflection = Snip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fullcircle

// @@protoc_insertion_point(global_scope)
